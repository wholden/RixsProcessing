import numpy as np
import matplotlib.pyplot as pyplt
import glob
import re

plt = pyplt #Alex, change this to xraycam.camcontrol.plt if you want to use Plotly

def process_runs(filenamelist,parameters = {}):
    """Processes list of files consisting of RIXS dataruns."""
    import xraycam.camcontrol
    lineouts = []
    incidents = []
    for f in sorted(filenamelist):
        pre, val = parse_filename(f)
        lineouts.append(xraycam.camcontrol.DataRun(run_prefix=pre,loadonly=True).get_lineout(**parameters))
        incidents.append(val)  
    energies = np.array(lineouts)[:,0]
    intensities = np.array(lineouts)[:,1]
    ienergies=np.transpose(np.array([incidents for y in energies[0]]))
    return (ienergies,energies,intensities) 

def parse_filename(filename):
    """Parses a directory string containing a run output.  
    For example, to be used with the output of glob or os.listdir"""
    import re
    parser = re.compile(r'.*/(.*:([\d\.]*))_+array.npy')
    match = parser.match(filename)
    return match.group(1), float(match.group(2))


def get_files(prefix,modifier='',directory=None):
    if directory is None:
        import xraycam
        directory = xraycam.config.saveconfig['Directory']
    allfiles = glob.glob(directory+'{}*'.format(prefix)+modifier+'_array.npy')
    files=[]
    parser = re.compile(r'.*:\d*\.*\d*'+modifier+'_array.npy')
    for f in allfiles:
        if parser.match(f) is not None:
            files.append(f)
    return files


class RIXS_Dataset:
    
    def __init__(self, prefix = None, autoload = True, parameters = {}):
        self.parameters = parameters
        if prefix is not None:
            self.generate_filename_list(prefix)
            if autoload:
                self.load_from_files()

    def load_from_files(self):
        incident, emission, intensity = process_runs(self.filenamelist, self.parameters)
        self.incidentenergies = incident
        self.emissionenergies = emission
        self.intensities = intensity
        
    def generate_filename_list(self, fileinput, modifier='', directory=None):
        """Either pass in a custom filenamelist, or a prefix to use with the
        get_files function, which optionallly takes modifiers like additional
        underscores for multiple runs.

        If directory is not specified, default directory defined in get_files
        function is used."""
        if type(fileinput) is list:
            self.filenamelist = fileinput
        else:
            self.filenamelist = get_files(fileinput, modifier=modifier, directory=directory)
        
    def herfd_slice(self, energy, plot=True, show=True):
        self._check_files_loaded()
        self._warn_parameters()
        index = np.searchsorted(self.emissionenergies[0], energy)
        y = self.intensities[:, index]
        x = self.incidentenergies[:, index]
        if plot:
            plt.plot(x, y, label='data')
            if show:
                plt.show()
        return np.array([x,y])
    
    def xes_slice(self, energy, plot=True, show=True):
        self._check_files_loaded()
        self._warn_parameters()
        index = np.searchsorted(np.array(self.incidentenergies[:,0]), energy)        
        lineout = np.array([self.emissionenergies[0], self.intensities[index]])
        if plot:
            plt.plot(*lineout,label='')
            if show:
                plt.show()
        return lineout
    
    def plot_rixs_plane(self, log=True, **plotkwargs):
        self._check_files_loaded()
        self._warn_parameters()
        fig, ax = pyplt.subplots(**plotkwargs)
        if log:
            ploti = np.log(self.intensities)
        else:
            ploti = self.intensities
        ax.contourf(self.incidentenergies, self.emissionenergies, ploti)
        pyplt.show()
        
    def _check_files_loaded(self):
        try:
            self.intensities
        except AttributeError:
            raise ValueError('load_from_files must load data before calling this method.')
            
    def _warn_parameters(self):
        if self.parameters == {}:
            print('WARNING: parameters not set, energy will not be properly calibrated and frames will not be properly processed.')
            
    def save_csv_to_file(self, directory, prefix):
        print('Saving files like: ',directory+prefix+'_rixs_().csv')
        np.savetxt(directory+prefix+'_rixs_incidentenergies.csv',self.incidentenergies, delimiter=',')
        np.savetxt(directory+prefix+'_rixs_emissionenergies.csv',self.emissionenergies, delimiter=',')
        np.savetxt(directory+prefix+'_rixs_intensities.csv',self.intensities, delimiter=',')

    def load_from_csv(self, directory, prefix):
        """Load from csv files. Aimed at csv files generated by this class's save_csv_to_file method."""
        self.incidentenergies = np.loadtxt(directory+prefix+'_rixs_incidentenergies.csv', delimiter=',')
        self.emissionenergies = np.loadtxt(directory+prefix+'_rixs_emissionenergies.csv', delimiter=',')
        self.intensities = np.loadtxt(directory+prefix+'_rixs_intensities.csv', delimiter=',')